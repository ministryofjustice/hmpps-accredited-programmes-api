openapi: 3.0.1
info:
  title: Accredited Programmes API
  version: 1.0.0
servers:
  - url: /
security:
  - bearerAuth: [ ]
paths:
  /subject-access-request:
    get:
      operationId: subjectAccessRequestGet
      summary: API call to retrieve SAR information about a person
      tags:
        - Subject Access Request
      description: |
        Either NOMIS Prison Number (PRN) must be provided as part of the request.
        * If the product uses the identifier type transmitted in the request, it can respond with its data and HTTP code 200.
        * If the product uses the identifier type transmitted in the request but has no data to respond with, it should respond with HTTP code 204
        * If the product does not use the identifier type transmitted in the request, it should respond with HTTP code 209.
      parameters:
        - name: prn
          in: query
          description: prison number
          required: false
          schema:
            type: string
        - name: fromDate
          in: query
          description: from date
          schema:
            type: string
            format: date
        - name: toDate
          in: query
          description: to date
          schema:
            type: string
            format: date
      responses:
        '200':
          description: the sar content
          content:
            application/json:
              schema:
                type: object
        '204':
          description: Request successfully processed - no content found
        '209':
          description: Subject Identifier is not recognised by this service


  /people/{prisonNumber}/sentences:
    get:
      tags:
        - Person
      summary: Sentence details
      operationId: getSentenceDetails
      parameters:
        - name: prisonNumber
          in: path
          description: prison number
          example: "A1234AA"
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/SentenceDetails'
        404:
          description: Person not found
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /prisoner-search:
    post:
      tags:
        - Person
      deprecated: true
      summary: (Deprecated - use /people/search instead) Search for a prisoner via prison search api by prisoner id and caseload.
      operationId: searchPrisoner
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/PrisonerSearchRequest'
      responses:
        201:
          description: The prisoner search results.
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PrisonerSearchResponse'
        400:
          description: Bad input
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The client is not authorized to perform this operation.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /people/search:
    post:
      tags:
        - Person
      summary: Search for a prisoner via prison search api by prisoner id and caseload.
      operationId: searchPeople
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/PeopleSearchRequest'
      responses:
        201:
          description: The prisoner search results.
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PeopleSearchResponse'
        400:
          description: Bad input
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The client is not authorized to perform this operation.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /prison-search:
    post:
      tags:
        - Prison
      summary: Search for prisons via prison register api by prison id.
      operationId: getPrisons
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/PrisonSearchRequest'
      responses:
        201:
          description: The prisoner search results.
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PrisonSearchResponse'
        400:
          description: Bad input
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The client is not authorized to perform this operation.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'


  /prison-search/{prisonId}:
    get:
      tags:
        - Prison
      summary: Details for a single prison
      operationId: getPrisonById
      parameters:
        - name: prisonId
          in: path
          description: A prison identifier
          required: true
          schema:
            type: string
            pattern: '^[A-Z]{3,6}$'
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/PrisonSearchResponse'
        400:
          description: Bad input
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The client is not authorized to perform this operation.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /courses:
    get:
      tags:
        - Courses
      summary: List all courses
      operationId: getAllCourses
      parameters:
        - name: withdrawn
          in: query
          description: flag to return withdrawn
          required: false
          schema:
            type: boolean
      responses:
        200:
          description: Return a JSON representation of all courses that are not withdrawn.
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Course'
    post:
      tags:
        - Courses
      summary: Create a course
      operationId: createCourse
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CourseCreateRequest'
      responses:
        200:
          description: Return a JSON representation of the created course
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Course'
        '401':
          description: You are not authorized to view the resource
        '403':
          description: Accessing the resource you were trying to reach is forbidden

  /courses/csv:
    put:
      tags:
        - Courses
      summary: Upload a CSV format file containing a full set of Courses data.
      operationId: updateCourses
      requestBody:
        required: true
        content:
          'text/csv;charset=UTF-8':
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CourseRecord'
      responses:
        204:
          description: Successful update
        400:
          description: Bad input
    get:
      tags:
        - Courses
      summary: List all courses
      operationId: getCoursesCsv
      responses:
        200:
          description: Return a CSV format representation of all courses that are not withdrawn. The data is compatible with the PUT /courses endpoint and may be round-tripped.
          content:
            'text/csv;charset=UTF-8':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CourseRecord'

  /courses/course-names:
    get:
      tags:
        - Courses
      summary: Get all unique course names
      operationId: getAllCourseNames
      parameters:
        - name: includeWithdrawn
          in: query
          description: flag to include withdrawn
          required: false
          schema:
            type: boolean
      responses:
        200:
          description: Return a JSON representation of all unique course names that are not withdrawn.
          content:
            'application/json':
              schema:
                type: array
                items:
                  type: string

  /courses/prerequisites/csv:
    put:
      tags:
        - Course Prerequisites
      summary: Upload a CSV format file containing a full set of prerequisites data for the current set of courses.
      operationId: updatePrerequisites
      description: >
        Accepts a CSV format file of data representing the desired state of all prerequisite data attached to the current set of courses.
        <p>Pre-existing prerequisite data will be removed before the new data is applied.
        <p>The first row of CSV data is treated as a header row.  The column headings in the header row must much the names of the fields in the PrerequisiteRecord schema. Column order is not important.
      requestBody:
        required: true
        content:
          'text/csv;charset=UTF-8':
            schema:
              type: array
              items:
                $ref: '#/components/schemas/PrerequisiteRecord'
      responses:
        200:
          description: Successful update
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LineMessage'
        400:
          description: Bad input
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
        - Course Prerequisites
      summary: Download a CSV format representation of the current set of prerequisites.
      operationId: getPrerequisitesCsv
      responses:
        200:
          description: The CSV formatted data is compatible with the PUT operation and may be round-tripped.
          content:
            'text/csv;charset=UTF-8':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PrerequisiteRecord'

  /courses/{id}/prerequisites:
    get:
      tags:
        - Courses
      summary: Get a list of prerequisites for a course.
      operationId: getCoursePrerequisites
      parameters:
        - name: id
          in: path
          description: A course identifier
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description:
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/CoursePrerequisites'
    put:
      tags:
        - Courses
      operationId: updateCoursePrerequisites
      description: Replace all prerequisites for a course
      parameters:
        - name: id
          in: path
          description: A course identifier
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/CoursePrerequisites'
      responses:
        200:
          description: Successful update
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/CoursePrerequisites'
        400:
          description: Bad input
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /courses/{id}:
    get:
      tags:
        - Courses
      summary: Details for a single course
      operationId: getCourseById
      parameters:
        - name: id
          in: path
          description: A course identifier
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Course'
    put:
      tags:
        - Courses
      summary: Update a course
      description: Updates the details of a specific course
      operationId: updateCourse
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: A course identifier
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CourseUpdateRequest'
      responses:
        '200':
          description: Successful update
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
        '400':
          description: Bad input
        '401':
          description: You are not authorized to view the resource
        '403':
          description: Accessing the resource you were trying to reach is forbidden
        '404':
          description: The resource you were trying to reach is not found

    delete:
      tags:
        - Courses
      summary: delete a course
      description: Deletes a course from the database. Note you can only delete a course if it's not being used.
      operationId: deleteCourse
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: A course identifier
      responses:
        '200':
          description: Successful delete
        '400':
          description: Bad input
        '401':
          description: You are not authorized to view the resource
        '403':
          description: Accessing the resource you were trying to reach is forbidden
        '404':
          description: The course did not exist

  /courses/{id}/offerings:
    get:
      tags:
        - Course Offerings
      summary: List all offerings for a course
      operationId: getAllOfferingsByCourseId
      parameters:
        - name: id
          in: path
          description: A course identifier
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CourseOffering'
    put:
      tags:
        - Course Offerings
      summary: update a course offering
      operationId: updateCourseOffering
      parameters:
        - name: id
          in: path
          description: A course identifier
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/CourseOffering'
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/CourseOffering'
    post:
      tags:
        - Course Offerings
      summary: Add a course offering
      operationId: addCourseOffering
      parameters:
        - name: id
          in: path
          description: A course identifier
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/CourseOffering'
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/CourseOffering'

  /courses/{id}/offerings/{offeringId}:
    delete:
      tags:
        - Course Offerings
      summary: Delete a course offering, This can only be done if there are no referrals using this offering.
      operationId: deleteCourseOffering
      parameters:
        - name: id
          in: path
          description: A course identifier
          required: true
          schema:
            type: string
            format: uuid
        - name: offeringId
          in: path
          description: An offering identifier
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: successful operation

  /courses/audiences:
    get:
      tags:
        - Courses
      summary: Get all audiences
      description: Returns a list of audiences with their name and colour
      operationId: getAudiences
      responses:
        '200':
          description: Successfully retrieved list of audience
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Audience'
        '401':
          description: You are not authorized to view the resource
        '403':
          description: Accessing the resource you were trying to reach is forbidden
        '404':
          description: The resource you were trying to reach is not found

  /organisations/{organisationId}/courses:
    get:
      tags:
        - Course Offerings
      summary: List all courses for an organisationId
      operationId: getAllCoursesByOrganisationId
      parameters:
        - name: organisationId
          in: path
          description: A organisation identifier
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Course'

  /offerings/csv:
    put:
      tags:
        - Course Offerings
      summary: Upload all offerings in CSV format.
      operationId: updateOfferings
      description: >
        Accepts a CSV format file of data representing the desired state of all offerings data attached to the current set of courses.
        <p>Pre-existing offering data will be removed before the new data is applied.
        <p>The first row of CSV data is treated as a header row.  The column headings in the header row must much the names of the fields in the OfferingRecord schema. Column order is not important.
      requestBody:
        required: true
        content:
          'text/csv;charset=UTF-8':
            schema:
              type: array
              items:
                $ref: '#/components/schemas/OfferingRecord'
      responses:
        204:
          description: Successful update
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LineMessage'
        400:
          description: Bad input
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
        - Course Offerings
      summary: Download all Offerings in CSV format
      operationId: getOfferingsCsv
      responses:
        200:
          description: successful operation
          content:
            'text/csv;charset=UTF-8':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OfferingRecord'

  /offerings/{id}:
    get:
      tags:
        - Course Offerings
      summary: Details for a single course offering
      operationId: getOfferingById
      parameters:
        - name: id
          in: path
          description: A course offering identifier
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/CourseOffering'
        401:
          description: Unauthorised. The request was unauthorised.
        403:
          description: Forbidden.  The client is not authorised to access this offering.
        404:
          description: Invalid course offering id
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /offerings/{id}/course:
    get:
      tags:
        - Courses
      summary: Retrieve the course that owns an offering.
      operationId: getCourseByOfferingId
      parameters:
        - name: id
          in: path
          description: The id (UUID) of an offering.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Information about the Course that owns the offering.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Course'
        401:
          description: The request was unauthorised
        403:
          description: Forbidden.  The client is not authorised to access this offering.
        404:
          description: No offering has the supplied id (Not Found).

  /course-participations:
    post:
      tags:
        - Course Participations
      summary: Record information about a person's prior participation in a course.
      operationId: createCourseParticipation
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/CourseParticipationCreate'
      responses:
        201:
          description: The course participation information has been added.
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/CourseParticipation"
        400:
          description: Bad input
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The client is not authorized to perform this operation.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /course-participations/{id}:
    get:
      tags:
        - Course Participations
      summary: Return information about a person's participation in a course. Selected by a unique identifier.
      operationId: getCourseParticipationById
      parameters:
        - name: id
          in: path
          description: The unique identifier assigned to this record when it was created.
          schema:
            type: string
            format: uuid
          required: true
      responses:
        200:
          description: The selected course participation record.
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/CourseParticipation"
        401:
          description: The client is not authorised to perform this operation.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Course Participations
      summary: Update the information about a person's participation in a course.
      operationId: updateCourseParticipationById
      parameters:
        - name: id
          in: path
          description: The unique identifier assigned to this record when it was created.
          schema:
            type: string
            format: uuid
          required: true
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/CourseParticipationUpdate"
        required: true
      responses:
        200:
          description: The information about a person's participation in a course has been updated.
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/CourseParticipation"
        401:
          description: The client is not authorized to perform this operation.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: There is no information for the id, so it cannot be updated.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Course Participations
      summary: Delete information about a person's participation in a course.
      operationId: deleteCourseParticipationById
      parameters:
        - name: id
          in: path
          description: The unique identifier assigned to this record when it was created.
          schema:
            type: string
            format: uuid
          required: true
      responses:
        204:
          description: The information about a person's participation in a course has been deleted.
        401:
          description: The client is not authorized to perform this operation.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /people/{prisonNumber}/course-participations:
    get:
      tags:
        - Course Participations
      summary: Retrieve course participation information for a person identified by their prison number.
      operationId: getCourseParticipationsByPrisonNumber
      parameters:
        - name: prisonNumber
          in: path
          description: The prison number of the person for whom the information should be retrieved.
          example: "A1234AA"
          required: true
          schema:
            type: string
      responses:
        200:
          description: All historic course participation information for the person.  Empty if none found.
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CourseParticipation"
        401:
          description: The client is not authorised to perform this operation.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /people/offences/{prisonNumber}:
    get:
      summary: Get details of an offence by prison number
      description: Retrieves details of an offence by its unique code.
      tags:
        - Person
      operationId: getOffences
      parameters:
        - name: prisonNumber
          in: path
          description: The prison number of the person for whom the information should be retrieved.
          example: "A1234AA"
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Offence'
                type: array
        401:
          description: Unauthorised. The request was unauthorised.
        403:
          description: Forbidden.  The client is not authorised to access person.
        404:
          description: Invalid prison number
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /organisations/enabled:
    get:
      tags:
        - reference data
      summary: Get list of enabled organisations
      operationId: getEnabledOrganisations
      responses:
        200:
          description: List of enabled organisations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EnabledOrganisation'
        401:
          description: Unauthorised. The request was unauthorised.
        403:
          description: Forbidden.  The client is not authorised to access.

  /organisations:
    get:
      tags:
        - Organisation
      summary: Get all organisations
      description: Returns a list of organisations with their ID and name
      operationId: getOrganisations
      responses:
        '200':
          description: Successfully retrieved list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Organisation'
        '401':
          description: You are not authorized to view the resource
        '403':
          description: Accessing the resource you were trying to reach is forbidden
        '404':
          description: The resource you were trying to reach is not found

  /user/me/caseload:
    get:
      summary: Get list of caseloads for current user
      operationId: getCurrentUserCaseloads
      parameters:
        - name: allCaseloads
          in: query
          description: Flag to indicate whether to retrieve all caseloads or not. Set to false by default
          schema:
            type: boolean
            default: false
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CaseLoad'
                type: array
          description: Retrieves the caseloads associated with the authenticated user.
        "401":
          description: Unauthorised. The request was unauthorised.
        "403":
          description: Forbidden.  The client is not authorised to access.
      tags:
        - User
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Course:
      type: object
      properties:
        id:
          type: string
          format: uuid
        identifier:
          type: string
          example: 'BNM-VO'
          description: This is an internal identifier for the course (to be removed)
        name:
          type: string
          example: Thinking skills programme
        description:
          type: string
          example: Thinking Skills Programme (TSP) description
        alternateName:
          type: string
          example: 'BNM+'
        displayName:
          type: string
          example: 'Becoming New Me Plus: general violence offence (BNM+)'
        coursePrerequisites:
          type: array
          items:
            $ref: '#/components/schemas/CoursePrerequisite'
        audience:
          type: string
          example: 'Gang offence'
        audienceColour:
          type: string
          example: 'purple'
        withdrawn:
          type: boolean
          example: 'true'
      required:
        - id
        - name
        - coursePrerequisites
        - audience

    CourseRecord:
      title: 'CourseRecord'
      type: object
      properties:
        name:
          type: string
        alternateName:
          type: string
        identifier:
          type: string
        description:
          type: string
        audience:
          type: string
        audienceColour:
          type: string
          example: 'purple'
        comments:
          type: string
      required:
        - name
        - identifier
        - description
        - audience

    CoursePrerequisites:
      type: object
      properties:
        prerequisites:
          type: array
          items:
            $ref: '#/components/schemas/CoursePrerequisite'

    CoursePrerequisite:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
      example:
        - name: gender
          description: female
        - name: risk score
          description: 'ORGS: 50+'
        - name: offence type
          description: some offence here
      required:
        - name
        - description

    PrerequisiteRecord:
      type: object
      title: 'PrerequisiteRecord'
      properties:
        name:
          type: string
          example: "age"
          description: "The name of this Course Prerequisite."
        description:
          type: string
          example: "18+"
          description: "The value of this Course Prerequisite."
        course:
          type: string
          example: "Kaizen"
          description: "The name of the Course to which this Prerequisite applies. The name must match a course name exactly for this Prerequisite to be added to the Course."
        identifier:
          type: string
          example: "BNM-IPVO"
        comments:
          type: string
      required:
        - name
        - course
        - identifier

    CourseOffering:
      type: object
      properties:
        id:
          type: string
          format: uuid
        organisationId:
          type: string
          example: "MDI"
          description: "The unique identifier associated with the location hosting the offering. For prisons, this is the PrisonId, which is usually three capital letters."
        organisationEnabled:
          type: boolean
          description: "Describes if a referral can be created with an organisation"
        contactEmail:
          type: string
          format: email
          example: "ap-admin@digital.justice.gov.uk"
          description: "The email address of a contact for this offering"
        secondaryContactEmail:
          type: string
          format: email
          example: "ap-admin-2@digital.justice.gov.uk"
          description: "An optional secondary email address of a contact for this offering."
        referable:
          type: boolean
          default: true
        withdrawn:
          type: boolean
          default: false
      required:
        - organisationId
        - contactEmail
        - referable

    OfferingRecord:
      type: object
      title: 'OfferingRecord'
      properties:
        course:
          type: string
          example: "Kaizen"
          description: "The name of the Course to which this Offering applies. This value is only present to help with comprehension. It is not used to match offerings with courses."
        identifier:
          type: string
          description: "The unique identifier of the Course variant to which this Offering applies. The offering is added to the course having this identifier."
          example: "BNM-IPVO"
        organisation:
          type: string
        "contact email":
          type: string
          format: email
          example: "ap-admin@digital.justice.gov.uk"
          description: "The email address of the contact for this offering."
        "secondary contact email":
          type: string
          format: email
          example: "ap-admin2@digital.justice.gov.uk"
          description: "An optional secondary email address of a contact for this offering."
        prisonId:
          type: string
          example: "MDI"
          description: "The prison id for the prison associated with this Offering. This is usually three capital letters."
        referable:
          type: boolean
          default: true
      required:
        - course
        - prisonId
        - identifier
        - referable

    LineMessage:
      description: "warnings and errors for a line in an uploaded CSV file."
      type: object
      properties:
        lineNumber:
          type: integer
          example: 20
          description: "The number of the line in the CSV file that was rejected. The header line is lineNumber 1, the first line of CSV data is lineNumber 2."
        level:
          type: string
          enum:
            - Warning
            - Error
          description: "One of 'Error' or 'Warning'.  If a line has an Error then the data was not added. If it is a Warning then the line was added but there was a problem that should be corrected."
        message:
          type: string
          example: "No match for course 'Kaizen', prisonId 'BWI'"
          description: "Useful information about the Error or Warning."

    ErrorResponse:
      type: object
      properties:
        status:
          type: integer
          example: 404
        errorCode:
          type: integer
        userMessage:
          type: string
          example: "Not found"
        developerMessage:
          type: string
        moreInfo:
          type: string
      required:
        - status

    CourseParticipationUpdate:
      type: object
      properties:
        courseName:
          description: "The name of the course taken by the participant."
          type: string
        setting:
          $ref: '#/components/schemas/CourseParticipationSetting'
        outcome:
          $ref: '#/components/schemas/CourseParticipationOutcome'
        detail:
          type: string
        source:
          type: string

    CourseParticipationCreate:
      allOf:
        - $ref: "#/components/schemas/CourseParticipationUpdate"
        - type: object
          properties:
            prisonNumber:
              description: The prison number of the course participant.
              example: "A1234AA"
              type: string
          required:
            - prisonNumber

    CourseParticipation:
      allOf:
        - $ref: "#/components/schemas/CourseParticipationCreate"
        - type: object
          properties:
            id:
              description: A unique identifier for this record of participation in a course.
              type: string
              format: uuid
            addedBy:
              description: The identity of the person who added this CourseParticipation
              type: string
            createdAt:
              description: The date and time at which this CourseParticipation was created. ISO 8601 date-time format.
              type: string
          required:
            - id
            - addedBy
            - createdAt

    CourseParticipationSettingType:
      description: Either Custody or Community.
      type: string
      enum:
        - custody
        - community

    CourseParticipationSetting:
      description: Information about where the course was held.
      type: object
      properties:
        location:
          type: string
        type:
          $ref: '#/components/schemas/CourseParticipationSettingType'
      required:
        - type

    CourseParticipationOutcome:
      description: The outcome of participating in a course.
      type: object
      properties:
        status:
          type: string
          enum:
            - incomplete
            - complete
        yearStarted:
          type: integer
        yearCompleted:
          type: integer
      required:
        - status

    Person:
      type: object
      properties:
        prisonNumber:
          description: The prison number of the person who is being referred.
          example: "A1234AA"
          type: string
      required:
        - prisonNumber

    PrisonerSearchRequest:
      type: object
      properties:
        prisonerIdentifier:
          type: string
          description: Prisoner identifier for this case we only accept prison number
          example: A1234AA
        prisonIds:
          type: array
          description: List of Prison Ids (can include OUT and TRN) to restrict the search by. Unrestricted if not supplied or null
          example:
            - MDI
          items:
            type: string
            description: List of Prison Ids (can include OUT and TRN) to restrict the search by. Unrestricted if not supplied or null
            example: '["MDI"]'
      required:
        - prisonerIdentifier

    PrisonerSearchResponse:
      type: object
      properties:
        bookingId:
          type: string
        conditionalReleaseDate:
          type: string
          format: date
        prisonName:
          type: string
        dateOfBirth:
          type: string
          format: date
        ethnicity:
          type: string
        gender:
          type: string
        homeDetentionCurfewEligibilityDate:
          type: string
          format: date
        indeterminateSentence:
          type: boolean
        firstName:
          type: string
        lastName:
          type: string
        paroleEligibilityDate:
          type: string
          format: date
        prisonerNumber:
          type: string
        religion:
          type: string
        sentenceExpiryDate:
          type: string
          format: date
        sentenceStartDate:
          type: string
          format: date
        tariffDate:
          type: string
          format: date
      required:
        - bookingId
        - prisonerNumber

    PeopleSearchRequest:
      type: object
      properties:
        prisonerIdentifier:
          type: string
          description: Prisoner identifier for this case we only accept prison number
          example: A1234AA
        prisonIds:
          type: array
          description: List of Prison Ids (can include OUT and TRN) to restrict the search by. Unrestricted if not supplied or null
          example:
            - MDI
          items:
            type: string
            description: List of Prison Ids (can include OUT and TRN) to restrict the search by. Unrestricted if not supplied or null
            example: '["MDI"]'
      required:
        - prisonerIdentifier

    PeopleSearchResponse:
      type: object
      properties:
        bookingId:
          type: string
        conditionalReleaseDate:
          type: string
          format: date
        prisonName:
          type: string
        dateOfBirth:
          type: string
          format: date
        ethnicity:
          type: string
        gender:
          type: string
        homeDetentionCurfewEligibilityDate:
          type: string
          format: date
        indeterminateSentence:
          type: boolean
        firstName:
          type: string
        lastName:
          type: string
        paroleEligibilityDate:
          type: string
          format: date
        prisonerNumber:
          type: string
        religion:
          type: string
        sentenceExpiryDate:
          type: string
          format: date
        sentenceStartDate:
          type: string
          format: date
        tariffDate:
          type: string
          format: date
      required:
        - bookingId
        - prisonerNumber
    PrisonSearchRequest:
      type: object
      properties:
        prisonIds:
          type: array
          description: List of Prisons
          example:
            - MDI
          items:
            type: string
            description: List of Prison Ids
            example: '["MDI"]'
      required:
        - prisonIds

    PrisonSearchResponse:
      type: object
      properties:
        prisonId:
          type: string
        prisonName:
          type: string
        active:
          type: boolean
        male:
          type: boolean
        female:
          type: boolean
        contracted:
          type: boolean
        types:
          type: array
          items:
            $ref: '#/components/schemas/PrisonType'
        categories:
          type: array
          items:
            $ref: '#/components/schemas/Category'
        addresses:
          type: array
          items:
            $ref: '#/components/schemas/Address'
        operators:
          type: array
          items:
            $ref: '#/components/schemas/PrisonOperator'

      required:
        - bookingId
        - prisonerNumber

    EnabledOrganisation:
      type: object
      properties:
        code:
          type: string
          example: MDI
        description:
          type: string
          example: Stocken

    SentenceDetails:
      type: object
      properties:
        sentences:
          type: array
          items:
            $ref: '#/components/schemas/Sentence'
        keyDates:
          type: array
          items:
            $ref: '#/components/schemas/KeyDate'

    Sentence:
      type: object
      properties:
        description:
          type: string
          example: CJA03 Standard Determinate Sentence
        sentenceStartDate:
          type: string
          format: date

    KeyDate:
      type: object
      properties:
        type:
          type: string
          example: earliestReleaseDate
        code:
          type: string
          example: ERD
        description:
          type: string
          example: Earliest Release Date
        earliestReleaseDate:
          type: boolean
          default: false
        date:
          type: string
          format: date
        order:
          type: integer
          example: This is more like a weighting than an order - higher the number the more important the date.
      required:
        - type
        - code

    PrisonType:
      type: object
      properties:
        code:
          type: string
          example: "YOI"
        description:
          type: string
          example: "His Majesty’s Youth Offender Institution"
      required:
        - code
        - description

    Category:
      type: object
      properties:
        category:
          type: string
          example: "E"
      required:
        - category

    PrisonOperator:
      type: object
      properties:
        name:
          type: string
          example: "PSP, G4S"
      required:
        - name

    Address:
      type: object
      properties:
        addressLine1:
          type: string
          example: "Higher Lane"
        addressLine2:
          type: string
        town:
          type: string
          example: "Liverpool"
        county:
          type: string
          example: "Merseyside"
        postcode:
          type: string
          example: "L9 7LH"
        country:
          type: string
          example: "England"
      required:
        - addressLine1
        - town
        - postcode
        - country

    CaseLoad:
      type: object
      properties:
        caseLoadId:
          type: string
          nullable: true
          description: The unique identifier of the caseload.
        description:
          type: string
          nullable: true
          description: The description of the caseload.
        type:
          type: string
          nullable: true
          description: The type of the caseload.
        caseloadFunction:
          type: string
          nullable: true
          description: The function of the caseload.
        currentlyActive:
          type: boolean
          nullable: true
          description: Indicates whether the caseload is currently active or not.

    Offence:
      type: object
      properties:
        offence:
          type: string
          description: Description of the offence along with the code.
        category:
          type: string
          nullable: true
          description: Legislation.
        offenceDate:
          type: string
          format: date
          description: Offence start date.

    Organisation:
      type: object
      properties:
        code:
          type: string
          example: "MDI"
        prisonName:
          type: string
          example: "Moorland HMP"

    Audience:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 'e4d1a44a-9c3b-4a7c-b79c-4d8a76488eb2'
        name:
          type: string
          example: "Sexual offence"
        colour:
          type: string
          example: "orange"

    CourseUpdateRequest:
      type: object
      properties:
        name:
          type: string
          example: Thinking skills programme
        description:
          type: string
          example: Thinking Skills Programme (TSP) description
        alternateName:
          type: string
          example: 'BNM+'
        displayName:
          type: string
          example: 'Becoming New Me Plus: general violence offence (BNM+)'
        audience:
          type: string
          example: 'Gang offence'
        audienceColour:
          type: string
          example: '#FF5733'
        withdrawn:
          type: boolean
          example: true

    CourseCreateRequest:
      type: object
      properties:
        name:
          type: string
          example: Thinking skills programme
        identifier:
          type: string
          example: 'BNM-VO'
          description: This is an internal identifier for the course (to be removed)
        description:
          type: string
          example: Thinking Skills Programme (TSP) description
        alternateName:
          type: string
          example: 'BNM+'
        audienceId:
          type: string
          format: uuid
          example: 'e4d1a44a-9c3b-4a7c-b79c-4d8a76488eb2'
        withdrawn:
          type: boolean
          nullable: false
          example: true
      required:
        - name
        - description
        - audienceId
        - withdrawn
