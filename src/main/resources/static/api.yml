openapi: 3.0.1
info:
  title: Accredited Programmes API
  version: 1.0.0
servers:
  - url: /
security:
  - bearerAuth: [ ]
paths:
  /subject-access-request:
    get:
      operationId: subjectAccessRequestGet
      summary: API call to retrieve SAR information about a person
      tags:
        - Subject Access Request
      description: |
        Either NOMIS Prison Number (PRN) must be provided as part of the request.
        * If the product uses the identifier type transmitted in the request, it can respond with its data and HTTP code 200.
        * If the product uses the identifier type transmitted in the request but has no data to respond with, it should respond with HTTP code 204
        * If the product does not use the identifier type transmitted in the request, it should respond with HTTP code 209.
      parameters:
        - name: prn
          in: query
          description: prison number
          required: false
          schema:
            type: string
        - name: fromDate
          in: query
          description: from date
          schema:
            type: string
            format: date
        - name: toDate
          in: query
          description: to date
          schema:
            type: string
            format: date
      responses:
        '200':
          description: the sar content
          content:
            application/json:
              schema:
                type: object
        '204':
          description: Request successfully processed - no content found
        '209':
          description: Subject Identifier is not recognised by this service

  /courses:
    get:
      tags:
        - Courses
      summary: List all courses
      operationId: getAllCourses
      parameters:
        - name: withdrawn
          in: query
          description: flag to return withdrawn
          required: false
          schema:
            type: boolean
      responses:
        200:
          description: Return a JSON representation of all courses that are not withdrawn.
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Course'
    post:
      tags:
        - Courses
      summary: Create a course
      operationId: createCourse
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CourseCreateRequest'
      responses:
        200:
          description: Return a JSON representation of the created course
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Course'
        '401':
          description: You are not authorized to view the resource
        '403':
          description: Accessing the resource you were trying to reach is forbidden

  /courses/course-names:
    get:
      tags:
        - Courses
      summary: Get all unique course names
      operationId: getAllCourseNames
      parameters:
        - name: includeWithdrawn
          in: query
          description: flag to include withdrawn
          required: false
          schema:
            type: boolean
      responses:
        200:
          description: Return a JSON representation of all unique course names that are not withdrawn.
          content:
            'application/json':
              schema:
                type: array
                items:
                  type: string

  /courses/{id}/prerequisites:
    get:
      tags:
        - Courses
      summary: Get a list of prerequisites for a course.
      operationId: getCoursePrerequisites
      parameters:
        - name: id
          in: path
          description: A course identifier
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description:
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/CoursePrerequisites'
    put:
      tags:
        - Courses
      operationId: updateCoursePrerequisites
      description: Replace all prerequisites for a course
      parameters:
        - name: id
          in: path
          description: A course identifier
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/CoursePrerequisites'
      responses:
        200:
          description: Successful update
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/CoursePrerequisites'
        400:
          description: Bad input
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /courses/{id}:
    get:
      tags:
        - Courses
      summary: Details for a single course
      operationId: getCourseById
      parameters:
        - name: id
          in: path
          description: A course identifier
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Course'
    put:
      tags:
        - Courses
      summary: Update a course
      description: Updates the details of a specific course
      operationId: updateCourse
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: A course identifier
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CourseUpdateRequest'
      responses:
        '200':
          description: Successful update
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
        '400':
          description: Bad input
        '401':
          description: You are not authorized to view the resource
        '403':
          description: Accessing the resource you were trying to reach is forbidden
        '404':
          description: The resource you were trying to reach is not found

    delete:
      tags:
        - Courses
      summary: delete a course
      description: Deletes a course from the database. Note you can only delete a course if it's not being used.
      operationId: deleteCourse
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: A course identifier
      responses:
        '200':
          description: Successful delete
        '400':
          description: Bad input
        '401':
          description: You are not authorized to view the resource
        '403':
          description: Accessing the resource you were trying to reach is forbidden
        '404':
          description: The course did not exist

  /courses/{id}/offerings:
    get:
      tags:
        - Course Offerings
      summary: List all offerings for a course
      operationId: getAllOfferingsByCourseId
      parameters:
        - name: id
          in: path
          description: A course identifier
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CourseOffering'
    put:
      tags:
        - Course Offerings
      summary: update a course offering
      operationId: updateCourseOffering
      parameters:
        - name: id
          in: path
          description: A course identifier
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/CourseOffering'
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/CourseOffering'
    post:
      tags:
        - Course Offerings
      summary: Add a course offering
      operationId: addCourseOffering
      parameters:
        - name: id
          in: path
          description: A course identifier
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/CourseOffering'
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/CourseOffering'

  /courses/{id}/offerings/{offeringId}:
    delete:
      tags:
        - Course Offerings
      summary: Delete a course offering, This can only be done if there are no referrals using this offering.
      operationId: deleteCourseOffering
      parameters:
        - name: id
          in: path
          description: A course identifier
          required: true
          schema:
            type: string
            format: uuid
        - name: offeringId
          in: path
          description: An offering identifier
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: successful operation

  /courses/audiences:
    get:
      tags:
        - Courses
      summary: Get all audiences
      description: Returns a list of audiences with their name and colour
      operationId: getAudiences
      responses:
        '200':
          description: Successfully retrieved list of audience
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Audience'
        '401':
          description: You are not authorized to view the resource
        '403':
          description: Accessing the resource you were trying to reach is forbidden
        '404':
          description: The resource you were trying to reach is not found

  /organisations/{organisationId}/courses:
    get:
      tags:
        - Course Offerings
      summary: List all courses for an organisationId
      operationId: getAllCoursesByOrganisationId
      parameters:
        - name: organisationId
          in: path
          description: A organisation identifier
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Course'

  /offerings/{id}:
    get:
      tags:
        - Course Offerings
      summary: Details for a single course offering
      operationId: getOfferingById
      parameters:
        - name: id
          in: path
          description: A course offering identifier
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/CourseOffering'
        401:
          description: Unauthorised. The request was unauthorised.
        403:
          description: Forbidden.  The client is not authorised to access this offering.
        404:
          description: Invalid course offering id
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /offerings/{id}/course:
    get:
      tags:
        - Courses
      summary: Retrieve the course that owns an offering.
      operationId: getCourseByOfferingId
      parameters:
        - name: id
          in: path
          description: The id (UUID) of an offering.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Information about the Course that owns the offering.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Course'
        401:
          description: The request was unauthorised
        403:
          description: Forbidden.  The client is not authorised to access this offering.
        404:
          description: No offering has the supplied id (Not Found).

  /organisations/enabled:
    get:
      tags:
        - reference data
      summary: Get list of enabled organisations
      operationId: getEnabledOrganisations
      responses:
        200:
          description: List of enabled organisations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EnabledOrganisation'
        401:
          description: Unauthorised. The request was unauthorised.
        403:
          description: Forbidden.  The client is not authorised to access.

  /organisations:
    get:
      tags:
        - Organisation
      summary: Get all organisations
      description: Returns a list of organisations with their ID and name
      operationId: getOrganisations
      responses:
        '200':
          description: Successfully retrieved list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Organisation'
        '401':
          description: You are not authorized to view the resource
        '403':
          description: Accessing the resource you were trying to reach is forbidden
        '404':
          description: The resource you were trying to reach is not found

  /user/me/caseload:
    get:
      summary: Get list of caseloads for current user
      operationId: getCurrentUserCaseloads
      parameters:
        - name: allCaseloads
          in: query
          description: Flag to indicate whether to retrieve all caseloads or not. Set to false by default
          schema:
            type: boolean
            default: false
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CaseLoad'
                type: array
          description: Retrieves the caseloads associated with the authenticated user.
        "401":
          description: Unauthorised. The request was unauthorised.
        "403":
          description: Forbidden.  The client is not authorised to access.
      tags:
        - User
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Course:
      type: object
      properties:
        id:
          type: string
          format: uuid
        identifier:
          type: string
          example: 'BNM-VO'
          description: This is an internal identifier for the course (to be removed)
        name:
          type: string
          example: Thinking skills programme
        description:
          type: string
          example: Thinking Skills Programme (TSP) description
        alternateName:
          type: string
          example: 'BNM+'
        displayName:
          type: string
          example: 'Becoming New Me Plus: general violence offence (BNM+)'
        coursePrerequisites:
          type: array
          items:
            $ref: '#/components/schemas/CoursePrerequisite'
        audience:
          type: string
          example: 'Gang offence'
        audienceColour:
          type: string
          example: 'purple'
        withdrawn:
          type: boolean
          example: 'true'
      required:
        - id
        - name
        - coursePrerequisites
        - audience

    CourseRecord:
      title: 'CourseRecord'
      type: object
      properties:
        name:
          type: string
        alternateName:
          type: string
        identifier:
          type: string
        description:
          type: string
        audience:
          type: string
        audienceColour:
          type: string
          example: 'purple'
        comments:
          type: string
      required:
        - name
        - identifier
        - description
        - audience

    CoursePrerequisites:
      type: object
      properties:
        prerequisites:
          type: array
          items:
            $ref: '#/components/schemas/CoursePrerequisite'

    CoursePrerequisite:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
      example:
        - name: gender
          description: female
        - name: risk score
          description: 'ORGS: 50+'
        - name: offence type
          description: some offence here
      required:
        - name
        - description

    PrerequisiteRecord:
      type: object
      title: 'PrerequisiteRecord'
      properties:
        name:
          type: string
          example: "age"
          description: "The name of this Course Prerequisite."
        description:
          type: string
          example: "18+"
          description: "The value of this Course Prerequisite."
        course:
          type: string
          example: "Kaizen"
          description: "The name of the Course to which this Prerequisite applies. The name must match a course name exactly for this Prerequisite to be added to the Course."
        identifier:
          type: string
          example: "BNM-IPVO"
        comments:
          type: string
      required:
        - name
        - course
        - identifier

    CourseOffering:
      type: object
      properties:
        id:
          type: string
          format: uuid
        organisationId:
          type: string
          example: "MDI"
          description: "The unique identifier associated with the location hosting the offering. For prisons, this is the PrisonId, which is usually three capital letters."
        organisationEnabled:
          type: boolean
          description: "Describes if a referral can be created with an organisation"
        contactEmail:
          type: string
          format: email
          example: "ap-admin@digital.justice.gov.uk"
          description: "The email address of a contact for this offering"
        secondaryContactEmail:
          type: string
          format: email
          example: "ap-admin-2@digital.justice.gov.uk"
          description: "An optional secondary email address of a contact for this offering."
        referable:
          type: boolean
          default: true
        withdrawn:
          type: boolean
          default: false
      required:
        - organisationId
        - contactEmail
        - referable

    OfferingRecord:
      type: object
      title: 'OfferingRecord'
      properties:
        course:
          type: string
          example: "Kaizen"
          description: "The name of the Course to which this Offering applies. This value is only present to help with comprehension. It is not used to match offerings with courses."
        identifier:
          type: string
          description: "The unique identifier of the Course variant to which this Offering applies. The offering is added to the course having this identifier."
          example: "BNM-IPVO"
        organisation:
          type: string
        "contact email":
          type: string
          format: email
          example: "ap-admin@digital.justice.gov.uk"
          description: "The email address of the contact for this offering."
        "secondary contact email":
          type: string
          format: email
          example: "ap-admin2@digital.justice.gov.uk"
          description: "An optional secondary email address of a contact for this offering."
        prisonId:
          type: string
          example: "MDI"
          description: "The prison id for the prison associated with this Offering. This is usually three capital letters."
        referable:
          type: boolean
          default: true
      required:
        - course
        - prisonId
        - identifier
        - referable

    ErrorResponse:
      type: object
      properties:
        status:
          type: integer
          example: 404
        errorCode:
          type: integer
        userMessage:
          type: string
          example: "Not found"
        developerMessage:
          type: string
        moreInfo:
          type: string
      required:
        - status

    EnabledOrganisation:
      type: object
      properties:
        code:
          type: string
          example: MDI
        description:
          type: string
          example: Stocken

    CaseLoad:
      type: object
      properties:
        caseLoadId:
          type: string
          nullable: true
          description: The unique identifier of the caseload.
        description:
          type: string
          nullable: true
          description: The description of the caseload.
        type:
          type: string
          nullable: true
          description: The type of the caseload.
        caseloadFunction:
          type: string
          nullable: true
          description: The function of the caseload.
        currentlyActive:
          type: boolean
          nullable: true
          description: Indicates whether the caseload is currently active or not.

    Organisation:
      type: object
      properties:
        code:
          type: string
          example: "MDI"
        prisonName:
          type: string
          example: "Moorland HMP"

    Audience:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 'e4d1a44a-9c3b-4a7c-b79c-4d8a76488eb2'
        name:
          type: string
          example: "Sexual offence"
        colour:
          type: string
          example: "orange"

    CourseUpdateRequest:
      type: object
      properties:
        name:
          type: string
          example: Thinking skills programme
        description:
          type: string
          example: Thinking Skills Programme (TSP) description
        alternateName:
          type: string
          example: 'BNM+'
        displayName:
          type: string
          example: 'Becoming New Me Plus: general violence offence (BNM+)'
        audience:
          type: string
          example: 'Gang offence'
        audienceColour:
          type: string
          example: '#FF5733'
        withdrawn:
          type: boolean
          example: true

    CourseCreateRequest:
      type: object
      properties:
        name:
          type: string
          example: Thinking skills programme
        identifier:
          type: string
          example: 'BNM-VO'
          description: This is an internal identifier for the course (to be removed)
        description:
          type: string
          example: Thinking Skills Programme (TSP) description
        alternateName:
          type: string
          example: 'BNM+'
        audienceId:
          type: string
          format: uuid
          example: 'e4d1a44a-9c3b-4a7c-b79c-4d8a76488eb2'
        withdrawn:
          type: boolean
          nullable: false
          example: true
      required:
        - name
        - description
        - audienceId
        - withdrawn
