openapi: 3.0.1
info:
  title: Accredited Programmes API
  version: 1.0.0
servers:
  - url: /
security:
  - bearerAuth: []
paths:
  /courses:
    get:
      tags:
        - Courses
      summary: List all courses
      operationId: getAllCourses
      responses:
        200:
          description: Return a JSON representation of all courses that are not withdrawn.
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Course'

  /courses/csv:
    put:
      tags:
        - Courses
      summary: Upload a CSV format file containing a full set of Courses data.
      operationId: updateCourses
      requestBody:
        required: true
        content:
          'text/csv;charset=UTF-8':
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CourseRecord'
      responses:
        204:
          description: Successful update
        400:
          description: Bad input
    get:
      tags:
        - Courses
      summary: List all courses
      operationId: getCoursesCsv
      responses:
        200:
          description: Return a CSV format representation of all courses that are not withdrawn. The data is compatible with the PUT /courses endpoint and may be round-tripped.
          content:
            'text/csv;charset=UTF-8':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CourseRecord'

  /courses/course-names:
    get:
      tags:
        - Courses
      summary: Get all unique course names
      operationId: getAllCourseNames
      responses:
        200:
          description: Return a JSON representation of all unique course names that are not withdrawn.
          content:
            'application/json':
              schema:
                type: array
                items:
                  type: string

  /courses/prerequisites/csv:
    put:
      tags:
        - Course Prerequisites
      summary: Upload a CSV format file containing a full set of prerequisites data for the current set of courses.
      operationId: updatePrerequisites
      description: "Accepts a CSV format file of data representing the desired state of all prerequisite data attached to the current set of courses.
      <p>Pre-existing prerequisite data will be removed before the new data is applied.
      <p>The first row of CSV data is treated as a header row.  The column headings in the header row must much the names of the fields in the PrerequisiteRecord schema. Column order is not important."
      requestBody:
        required: true
        content:
          'text/csv;charset=UTF-8':
            schema:
              type: array
              items:
                $ref: '#/components/schemas/PrerequisiteRecord'
      responses:
        200:
          description: Successful update
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LineMessage'
        400:
          description: Bad input
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
        - Course Prerequisites
      summary: Download a CSV format representation of the current set of prerequisites.
      operationId: getPrerequisitesCsv
      responses:
        200:
          description: The CSV formatted data is compatible with the PUT operation and may be round-tripped.
          content:
            'text/csv;charset=UTF-8':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PrerequisiteRecord'

  /courses/{id}:
    get:
      tags:
        - Courses
      summary: Details for a single course
      operationId: getCourseById
      parameters:
        - name: id
          in: path
          description: A course identifier
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Course'

  /courses/{id}/offerings:
    get:
      tags:
        - Course Offerings
      summary: List all offerings for a course
      operationId: getAllOfferingsByCourseId
      parameters:
        - name: id
          in: path
          description: A course identifier
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CourseOffering'

  /organisations/{organisationId}/courses:
    get:
      tags:
        - Course Offerings
      summary: List all courses for an organisationId
      operationId: getAllCoursesByOrganisationId
      parameters:
        - name: organisationId
          in: path
          description: A organisation identifier
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Course'

  /offerings/csv:
    put:
      tags:
        - Course Offerings
      summary: Upload all offerings in CSV format.
      operationId: updateOfferings
      description: "Accepts a CSV format file of data representing the desired state of all offerings data attached to the current set of courses.
      <p>Pre-existing offering data will be removed before the new data is applied.
      <p>The first row of CSV data is treated as a header row.  The column headings in the header row must much the names of the fields in the OfferingRecord schema. Column order is not important."
      requestBody:
        required: true
        content:
          'text/csv;charset=UTF-8':
            schema:
              type: array
              items:
                $ref: '#/components/schemas/OfferingRecord'
      responses:
        204:
          description: Successful update
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LineMessage'
        400:
          description: Bad input
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
        - Course Offerings
      summary: Download all Offerings in CSV format
      operationId: getOfferingsCsv
      responses:
        200:
          description: successful operation
          content:
            'text/csv;charset=UTF-8':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OfferingRecord'

  /offerings/{id}:
    get:
      tags:
        - Course Offerings
      summary: Details for a single course offering
      operationId: getOfferingById
      parameters:
        - name: id
          in: path
          description: A course offering identifier
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/CourseOffering'
        401:
          description: Unauthorised. The request was unauthorised.
        403:
          description: Forbidden.  The client is not authorised to access this offering.
        404:
          description: Invalid course offering id
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /referrals:
    post:
      tags:
        - Referrals
      summary: Start a referral
      operationId: createReferral
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/ReferralCreate'
      responses:
        201:
          description: Started referral
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ReferralCreated'
        400:
          description: Bad input
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorised. The request was unauthorised.

    get:
      summary: Retrieve some referrals
      operationId: getReferrals
      tags:
        - Referrals
      parameters:
        - name: status
          in: query
          description: If present, only return referrals in the given state
          required: false
          schema:
            $ref: "#/components/schemas/ReferralStatus"
        - name: offeringId
          in: query
          description: The id (UUID) of an active offering. If present, only return referrals for that offering.
          required: false
          schema:
            type: string
            format: uuid
        - name: prisonNumber
          in: query
          description: The prison number of the person who is being referred. If present, only return referrals for the person.
          example: "A1234AA"
          required: false
          schema:
            type: string
      responses:
        200:
          description: Returns information about matching referrals
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Referral'
        401:
          description: The request was unauthorised
        403:
          description: Forbidden.  The client is not authorised to access referrals.

  /referrals/{id}:
    get:
      tags:
        - Referrals
      summary: Retrieve a referral
      operationId: getReferralById
      parameters:
        - name: id
          in: path
          description: The id (UUID) of a referral
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Information about the referral
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Referral'
        401:
          description: The request was unauthorised
        403:
          description: Forbidden.  The client is not authorised to access this referral.
        404:
          description: The referral does not exist

    put:
      tags:
        - Referrals
      summary: Update a referral
      operationId: updateReferralById
      parameters:
        - name: id
          in: path
          description: The id (UUID) of a referral
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/ReferralUpdate"
      responses:
        204:
          description: The referral was updated
        401:
          description: The request was unauthorised
        403:
          description: Forbidden.  The client is not authorised to access this referral.
        404:
          description: The referral does not exist

  /referrals/{id}/status:
    put:
      summary: Change a referral's status
      tags:
        - Referrals
      operationId: updateReferralStatusById
      parameters:
        - name: id
          in: path
          description: The id (UUID) of a referral
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/ReferralStatusUpdate'
      responses:
        204:
          description: The referral now has the requested status.
        401:
          description: The request was unauthorised.
        403:
          description: Forbidden.  The client is not authorised to access this referral.
        404:
          description: The referral does not exist.
        409:
          description: The referral may not change its status to the supplied value.

  /referrals/{id}/submit:
    post:
      summary: Submit a completed referral
      tags:
        - Referrals
      operationId: submitReferralById
      parameters:
        - name: id
          in: path
          description: The id (UUID) of a referral
          required: true
          schema:
            type: string
            format: uuid
      responses:
        204:
          description: Submitted a completed referral.
        401:
          description: The request was unauthorised.
        403:
          description: Forbidden. The client is not authorised to access this referral.
        404:
          description: The referral does not exist.

  /referrals/organisation/{organisationId}/dashboard:
    get:
      summary: Get paginated referrals by organisationId
      tags:
        - Referrals
      operationId: getReferralSummariesByOrganisationId
      parameters:
        - name: organisationId
          in: path
          description: The organisationId of an organisation
          required: true
          schema:
            type: string
        - name: page
          in: query
          description: Page number of the requested page
          required: false
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            default: 10
        - name: status
          in: query
          description: Filter by the status of the referral
          required: false
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: audience
          in: query
          description: Filter by the audience of the referral
          required: false
          schema:
            type: string
        - name: courseName
          in: query
          description: Filter by the name of the course associated with this referral
          required: false
          schema:
            type: string
      responses:
        200:
          description: Paginated summary of referrals for an organisation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/PaginatedReferralSummary'
        401:
          description: The request was unauthorised
        403:
          description: Not authorised to access this endpoint/these referrals
        404:
          description: No referrals for supplied organisationId (Not Found).

  /referrals/me/dashboard:
    get:
      summary: Get paginated referrals by logged in user
      tags:
        - Referrals
      operationId: getReferralSummariesByUsername
      parameters:
        - name: page
          in: query
          description: Page number of the requested page
          required: false
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            default: 10
        - name: status
          in: query
          description: Filter by the status of the referral
          required: false
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: audience
          in: query
          description: Filter by the audience of the referral
          required: false
          schema:
            type: string
        - name: courseName
          in: query
          description: Filter by the name of the course associated with this referral
          required: false
          schema:
            type: string
      responses:
        200:
          description: Paginated summary of referrals for logged in user
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/PaginatedReferralSummary'
        401:
          description: The request was unauthorised
        403:
          description: Not authorised to access this endpoint/these referrals
        404:
          description: No referrals for logged in user (Not Found).

  /offerings/{id}/course:
    get:
      tags:
        - Courses
      summary: Retrieve the course that owns an offering.
      operationId: getCourseByOfferingId
      parameters:
        - name: id
          in: path
          description: The id (UUID) of an offering.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Information about the Course that owns the offering.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Course'
        401:
          description: The request was unauthorised
        403:
          description: Forbidden.  The client is not authorised to access this offering.
        404:
          description: No offering has the supplied id (Not Found).

  /course-participations:
    post:
      tags:
        - Course Participations
      summary: Record information about a person's prior participation in a course.
      operationId: createCourseParticipation
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/CourseParticipationCreate'
      responses:
        201:
          description: The course participation information has been added.
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/CourseParticipation"
        400:
          description: Bad input
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The client is not authorized to perform this operation.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /course-participations/{id}:
    get:
      tags:
        - Course Participations
      summary: Return information about a person's participation in a course. Selected by a unique identifier.
      operationId: getCourseParticipationById
      parameters:
        - name: id
          in: path
          description: The unique identifier assigned to this record when it was created.
          schema:
            type: string
            format: uuid
          required: true
      responses:
        200:
          description: The selected course participation record.
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/CourseParticipation"
        401:
          description: The client is not authorised to perform this operation.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Course Participations
      summary: Update the information about a person's participation in a course.
      operationId: updateCourseParticipationById
      parameters:
        - name: id
          in: path
          description: The unique identifier assigned to this record when it was created.
          schema:
            type: string
            format: uuid
          required: true
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/CourseParticipationUpdate"
        required: true
      responses:
        200:
          description: The information about a person's participation in a course has been updated.
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/CourseParticipation"
        401:
          description: The client is not authorized to perform this operation.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: There is no information for the id, so it cannot be updated.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Course Participations
      summary: Delete information about a person's participation in a course.
      operationId: deleteCourseParticipationById
      parameters:
        - name: id
          in: path
          description: The unique identifier assigned to this record when it was created.
          schema:
            type: string
            format: uuid
          required: true
      responses:
        204:
          description: The information about a person's participation in a course has been deleted.
        401:
          description: The client is not authorized to perform this operation.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /people/{prisonNumber}/course-participations:
    get:
      tags:
        - Course Participations
      summary: Retrieve course participation information for a person identified by their prison number.
      operationId: getCourseParticipationsByPrisonNumber
      parameters:
        - name: prisonNumber
          in: path
          description: The prison number of the person for whom the information should be retrieved.
          example: "A1234AA"
          required: true
          schema:
            type: string
      responses:
        200:
          description: All historic course participation information for the person.  Empty if none found.
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CourseParticipation"
        401:
          description: The client is not authorised to perform this operation.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /oasys/{prisonNumber}/offence-details:
    get:
      tags:
        - Oasys Offence Details
      summary: Offence details as held by Oasys
      operationId: getOffenceDetails
      parameters:
        - name: prisonNumber
          in: path
          description: Prison nomis identifier
          example: "A1234AA"
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/OffenceDetail'
        401:
          description: Unauthorised. The request was unauthorised.
        403:
          description: Forbidden.  The client is not authorised to access person.
        404:
          description: Invalid prison number
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /oasys/{prisonNumber}/relationships:
    get:
      tags:
        - Oasys Relationships Details
      summary: Relationships details as held by Oasys
      operationId: getRelationships
      parameters:
        - name: prisonNumber
          in: path
          description: Prison nomis identifier
          example: "A1234AA"
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Relationships'
        401:
          description: Unauthorised. The request was unauthorised.
        403:
          description: Forbidden.  The client is not authorised to access person.
        404:
          description: Invalid prison number
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /oasys/{prisonNumber}/rosh-analysis:
    get:
      tags:
        - Oasys ROSH analysis Details
      summary: ROSH analysis details as held by Oasys
      operationId: getRoshAnalysis
      parameters:
        - name: prisonNumber
          in: path
          description: Prison nomis identifier
          example: "A1234AA"
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/RoshAnalysis'
        401:
          description: Unauthorised. The request was unauthorised.
        403:
          description: Forbidden.  The client is not authorised to access person.
        404:
          description: Invalid prison number
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /oasys/{prisonNumber}/lifestyle:
    get:
      tags:
        - Oasys lifestyle Details
      summary: Lifestyle details as held by Oasys
      operationId: getLifestyle
      parameters:
        - name: prisonNumber
          in: path
          description: Prison nomis identifier
          example: "A1234AA"
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Lifestyle'
        401:
          description: Unauthorised. The request was unauthorised.
        403:
          description: Forbidden.  The client is not authorised to access person.
        404:
          description: Invalid prison number
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /oasys/{prisonNumber}/psychiatric:
    get:
      tags:
        - Oasys psychiatric Details
      summary: Psychiatric details as held by Oasys
      operationId: getPsychiatric
      parameters:
        - name: prisonNumber
          in: path
          description: Prison nomis identifier
          example: "A1234AA"
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Psychiatric'
        401:
          description: Unauthorised. The request was unauthorised.
        403:
          description: Forbidden.  The client is not authorised to access person.
        404:
          description: Invalid prison number
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /oasys/{prisonNumber}/behaviour:
    get:
      tags:
        - Oasys behaviour Details
      summary: Behaviour details as held by Oasys
      operationId: getBehaviour
      parameters:
        - name: prisonNumber
          in: path
          description: Prison nomis identifier
          example: "A1234AA"
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Behaviour'
        401:
          description: Unauthorised. The request was unauthorised.
        403:
          description: Forbidden.  The client is not authorised to access person.
        404:
          description: Invalid prison number
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /oasys/{prisonNumber}/attitude:
    get:
      tags:
        - Oasys attitude Details
      summary: Attitude details as held by Oasys
      operationId: getAttitude
      parameters:
        - name: prisonNumber
          in: path
          description: Prison nomis identifier
          example: "A1234AA"
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Attitude'
        401:
          description: Unauthorised. The request was unauthorised.
        403:
          description: Forbidden.  The client is not authorised to access person.
        404:
          description: Invalid prison number
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /oasys/{prisonNumber}/health:
    get:
      tags:
        - Oasys health Details
      summary: Health details as held by Oasys
      operationId: getHealth
      parameters:
        - name: prisonNumber
          in: path
          description: Prison nomis identifier
          example: "A1234AA"
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Health'
        401:
          description: Unauthorised. The request was unauthorised.
        403:
          description: Forbidden.  The client is not authorised to access person.
        404:
          description: Invalid prison number
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /oasys/{prisonNumber}/learning-needs:
    get:
      tags:
        - Oasys learning needs Details
      summary: Learning needs details as held by Oasys
      operationId: getLearningNeeds
      parameters:
        - name: prisonNumber
          in: path
          description: Prison nomis identifier
          example: "A1234AA"
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/LearningNeeds'
        401:
          description: Unauthorised. The request was unauthorised.
        403:
          description: Forbidden.  The client is not authorised to access person.
        404:
          description: Invalid prison number
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'


  /oasys/{prisonNumber}/risks-and-alerts:
    get:
      tags:
        - Oasys risks Details
      summary: Risks details as held by Oasys
      operationId: getRisks
      parameters:
        - name: prisonNumber
          in: path
          description: Prison nomis identifier
          example: "A1234AA"
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Risks'
        401:
          description: Unauthorised. The request was unauthorised.
        403:
          description: Forbidden.  The client is not authorised to access person.
        404:
          description: Invalid prison number
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Course:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: Thinking skills programme
        description:
          type: string
          example: Thinking Skills Programme (TSP) description
        alternateName:
          type: string
          example: 'BNM+'
        coursePrerequisites:
          type: array
          items:
            $ref: '#/components/schemas/CoursePrerequisite'
        audience:
          type: string
          example: 'Gang offence'
      required:
        - id
        - name
        - coursePrerequisites
        - audience

    CourseRecord:
      title: 'CourseRecord'
      type: object
      properties:
        name:
          type: string
        alternateName:
          type: string
        identifier:
          type: string
        description:
          type: string
        audience:
          type: string
        comments:
          type: string
      required:
        - name
        - identifier
        - description
        - audience

    CoursePrerequisite:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
      example:
        - name: gender
          description: female
        - name: risk score
          description: 'ORGS: 50+'
        - name: offence type
          description: some offence here
      required:
        - name
        - description

    PrerequisiteRecord:
      type: object
      title: 'PrerequisiteRecord'
      properties:
        name:
          type: string
          example: "age"
          description: "The name of this Course Prerequisite."
        description:
          type: string
          example: "18+"
          description: "The value of this Course Prerequisite."
        course:
          type: string
          example: "Kaizen"
          description: "The name of the Course to which this Prerequisite applies. The name must match a course name exactly for this Prerequisite to be added to the Course."
        identifier:
          type: string
          example: "BNM-IPVO"
        comments:
          type: string
      required:
        - name
        - course
        - identifier

    CourseOffering:
      type: object
      properties:
        id:
          type: string
          format: uuid
        organisationId:
          type: string
          example: "MDI"
          description: "The unique identifier associated with the location hosting the offering. For prisons, this is the PrisonId, which is usually three capital letters."
        contactEmail:
          type: string
          format: email
          example: "ap-admin@digital.justice.gov.uk"
          description: "The email address of a contact for this offering"
        secondaryContactEmail:
          type: string
          format: email
          example: "ap-admin-2@digital.justice.gov.uk"
          description: "An optional secondary email address of a contact for this offering."
        referable:
          type: boolean
          default: true
      required:
        - id
        - organisationId
        - contactEmail
        - referable

    OfferingRecord:
      type: object
      title: 'OfferingRecord'
      properties:
        course:
          type: string
          example: "Kaizen"
          description: "The name of the Course to which this Offering applies. This value is only present to help with comprehension. It is not used to match offerings with courses."
        identifier:
          type: string
          description: "The unique identifier of the Course variant to which this Offering applies. The offering is added to the course having this identifier."
          example: "BNM-IPVO"
        organisation:
          type: string
        "contact email":
          type: string
          format: email
          example: "ap-admin@digital.justice.gov.uk"
          description: "The email address of the contact for this offering."
        "secondary contact email":
          type: string
          format: email
          example: "ap-admin2@digital.justice.gov.uk"
          description: "An optional secondary email address of a contact for this offering."
        prisonId:
          type: string
          example: "MDI"
          description: "The prison id for the prison associated with this Offering. This is usually three capital letters."
        referable:
          type: boolean
          default: true
      required:
        - course
        - prisonId
        - identifier
        - referable

    LineMessage:
      description: "warnings and errors for a line in an uploaded CSV file."
      type: object
      properties:
        lineNumber:
          type: integer
          example: 20
          description: "The number of the line in the CSV file that was rejected. The header line is lineNumber 1, the first line of CSV data is lineNumber 2."
        level:
          type: string
          enum:
            - Warning
            - Error
          description: "One of 'Error' or 'Warning'.  If a line has an Error then the data was not added. If it is a Warning then the line was added but there was a problem that should be corrected."
        message:
          type: string
          example: "No match for course 'Kaizen', prisonId 'BWI'"
          description: "Useful information about the Error or Warning."

    ErrorResponse:
      type: object
      properties:
        status:
          type: integer
          example: 404
        errorCode:
          type: integer
        userMessage:
          type: string
          example: "Not found"
        developerMessage:
          type: string
        moreInfo:
          type: string
      required:
        - status

    CourseParticipationUpdate:
      type: object
      properties:
        courseName:
          description: "The name of the course taken by the participant."
          type: string
        setting:
          $ref: '#/components/schemas/CourseParticipationSetting'
        outcome:
          $ref: '#/components/schemas/CourseParticipationOutcome'
        detail:
          type: string
        source:
          type: string

    CourseParticipationCreate:
      allOf:
        - $ref: "#/components/schemas/CourseParticipationUpdate"
        - type: object
          properties:
            prisonNumber:
              description: The prison number of the course participant.
              example: "A1234AA"
              type: string
          required:
            - prisonNumber

    CourseParticipation:
      allOf:
        - $ref: "#/components/schemas/CourseParticipationCreate"
        - type: object
          properties:
            id:
              description: A unique identifier for this record of participation in a course.
              type: string
              format: uuid
            addedBy:
              description: The identity of the person who added this CourseParticipation
              type: string
            createdAt:
              description: The date and time at which this CourseParticipation was created. ISO 8601 date-time format.
              type: string
          required:
            - id
            - addedBy
            - createdAt

    CourseParticipationSettingType:
      description: Either Custody or Community.
      type: string
      enum:
        - custody
        - community

    CourseParticipationSetting:
      description: Information about where the course was held.
      type: object
      properties:
        location:
          type: string
        type:
          $ref: '#/components/schemas/CourseParticipationSettingType'
      required:
        - type

    CourseParticipationOutcome:
      description: The outcome of participating in a course.
      type: object
      properties:
        status:
          type: string
          enum:
            - incomplete
            - complete
        yearStarted:
          type: integer
        yearCompleted:
          type: integer
      required:
        - status

    ReferralCreate:
      type: object
      properties:
        offeringId:
          description: The id (UUID) of an active offering
          type: string
          format: uuid
        prisonNumber:
          description: The prison number of the person who is being referred.
          example: "A1234AA"
          type: string
      required:
        - offeringId
        - prisonNumber

    ReferralUpdate:
      type: object
      properties:
        additionalInformation:
          type: string
        oasysConfirmed:
          type: boolean
          default: false
        hasReviewedProgrammeHistory:
          type: boolean
          default: false
      required:
        - oasysConfirmed
        - hasReviewedProgrammeHistory

    Referral:
      allOf:
        - $ref: "#/components/schemas/ReferralCreate"
        - $ref: "#/components/schemas/ReferralUpdate"
        - type: object
          properties:
            id:
              description: The unique id (UUID) of this referral.
              type: string
              format: uuid
            status:
              $ref: "#/components/schemas/ReferralStatus"
            referrerUsername:
              type: string
            submittedOn:
              type: string
          required:
            - id
            - offeringId
            - prisonNumber
            - referrerUsername
            - oasysConfirmed
            - status

    ReferralCreated:
      type: object
      properties:
        referralId:
          description: The unique id (UUID) of the new referral.
          type: string
          format: uuid
      required:
        - referralId

    ReferralStatusUpdate:
      type: object
      properties:
        status:
          $ref: "#/components/schemas/ReferralStatus"
      required:
        - status

    ReferralStatus:
      type: string
      enum:
        - referral_started
        - referral_submitted
        - awaiting_assessment
        - assessment_started

    ReferralSummary:
      type: object
      properties:
        id:
          description: The unique id (UUID) of the new referral.
          type: string
          format: uuid
        referrerUsername:
          description: The unique HMPPS username of the user who created this referral.
          type: string
        courseName:
          type: string
        audience:
          type: string
          example: 'Gang offence'
        status:
          $ref: "#/components/schemas/ReferralStatus"
        submittedOn:
          type: string
        prisonNumber:
          type: string
        prisonName:
          type: string
          description: Name of the prison
        organisationId:
          type: string
          description: ID of the organisation
        sentence:
          $ref: '#/components/schemas/Sentence'
        earliestReleaseDate:
          type: string
          format: date
          description: Earliest release date, if applicable, to this individual. Derived from Sentence information.
        prisonerName:
          $ref: '#/components/schemas/Name'

      required:
        - id
        - referrerUsername
        - courseName
        - audience
        - status
        - prisonNumber

    PaginatedReferralSummary:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/ReferralSummary'
        totalPages:
          type: integer
        totalElements:
          type: integer
        pageSize:
          type: integer
        pageNumber:
          type: integer
        pageIsEmpty:
          type: boolean

    Person:
      type: object
      properties:
        prisonNumber:
          description: The prison number of the person who is being referred.
          example: "A1234AA"
          type: string
      required:
        - prisonNumber

    Name:
      type: object
      properties:
        firstName:
          type: string
          description: First name of the person
        lastName:
          type: string
          description: Last name of the person
      required:
        - firstName
        - lastName

    Sentence:
      type: object
      properties:
        conditionalReleaseDate:
          type: string
          format: date
          description: Conditional release date
        tariffExpiryDate:
          type: string
          format: date
          description: Tariff expiry date
        paroleEligibilityDate:
          type: string
          format: date
          description: Parole eligibility date
        indeterminateSentence:
          type: boolean
          description: Indicates if it's an indeterminate sentence
        nonDtoReleaseDateType:
          type: string
          description: Non-DTO release date type

    OffenceDetail:
      type: object
      properties:
        offenceDetails:
          type: string
          example: Armed robbery
        contactTargeting:
          type: boolean
          default: false
        raciallyMotivated:
          type: boolean
          default: false
        revenge:
          type: boolean
          default: false
        domesticViolence:
          type: boolean
          default: false
        repeatVictimisation:
          type: boolean
          default: false
        victimWasStranger:
          type: boolean
          default: false
        stalking:
          type: boolean
          default: false
        recognisesImpact:
          type: boolean
          default: false
        numberOfOthersInvolved:
          type: integer
          default: 0
        othersInvolvedDetail:
          type: string
          example: There were two others involved who absconded at the scene
        peerGroupInfluences:
          type: string
          example: This person is easily lead
        motivationAndTriggers:
          type: string
          example: Drug misuse fuels this persons motivation
        acceptsResponsibility:
          type: boolean
          default: false
        acceptsResponsibilityDetail:
          type: string
          example: This person fully accepts their actions
        patternOffending:
          type: string
          example: This person has a long history of robbery

    Relationships:
      type: object
      properties:
        dvEvidence:
          type: boolean
          default: false
        victimFormerPartner:
          type: boolean
          default: false
        victimFamilyMember:
          type: boolean
          default: false
        victimOfPartnerFamily:
          type: boolean
          default: false
        perpOfPartnerOrFamily:
          type: boolean
          default: false
        relIssuesDetails:
          type: string
          example: This person has a history of domestic violence

    RoshAnalysis:
      type: object
      properties:
        offenceDetails:
          type: string
          example: Tax evasion
        whereAndWhen:
          type: string
          example: at home
        howDone:
          type: string
          example: false accounting
        whoVictims:
          type: string
          example: hmrc
        anyoneElsePresent:
          type: string
          example: company secretary
        whyDone:
          type: string
          example: Greed
        sources:
          type: string
          example: crown court

    Lifestyle:
      type: object
      properties:
        activitiesEncourageOffending:
          type: string
          example: Drug addiction
        lifestyleIssues:
          type: string
          example: Commits robbery to fund drug addiction

    Psychiatric:
      type: object
      properties:
        description:
          type: string
          example: 0-No problems

    Behaviour:
      type: object
      properties:
        temperControl:
          type: string
          example: 0-No problems
        problemSolvingSkills:
          type: string
          example: 0-No problems
        awarenessOfConsequences:
          type: string
          example: 0-No problems
        achieveGoals:
          type: string
          example: 0-No problems
        understandsViewsOfOthers:
          type: string
          example: 0-No problems
        concreteAbstractThinking:
          type: string
          example: 0-No problems

    Attitude:
      type: object
      properties:
        proCriminalAttitudes:
          type: string
          example: 0-No problems
        motivationToAddressBehaviour:
          type: string
          example: 0-No problems

    Health:
      type: object
      properties:
        anyHealthConditions:
          type: boolean
          default: false
        description:
          type: string
          example: Blind in one eye

    LearningNeeds:
      type: object
      properties:
        noFixedAbodeOrTransient:
          type: boolean
          default: false
        workRelatedSkills:
          type: string
          example: 0-No problems
        problemsReadWriteNum:
          type: string
          example: 0-No problems
        learningDifficulties:
          type: string
          example: 0-No problems
        qualifications:
          type: string
          example: 0-Any qualifications
        basicSkillsScore:
          type: string
          example: 6

    Risks:
      type: object
      properties:
        ogrsYear1:
          type: number
          example: 45
        ogrsYear2:
          type: number
          example: 65
        ogrsRisk:
          type: string
          example: High
        ovpYear1:
          type: number
          example: 23
        ovpYear2:
          type: number
          example: 32
        ovpRisk:
          type: string
          example: Medium
        rsrScore:
          type: number
          example: 3.45
        rsrRisk:
          type: string
          example: Medium
        ospcScore:
          type: string
          example: Low
        ospiScore:
          type: string
          example: High
        overallRoshLevel:
          type: string
          example: Low
        riskPrisonersCustody:
          type: string
          example: Medium
        riskStaffCustody:
          type: string
          example: Medium
        riskKnownAdultCustody:
          type: string
          example: Medium
        riskPublicCustody:
          type: string
          example: Medium
        riskChildrenCustody:
          type: string
          example: Medium
        riskStaffCommunity:
          type: string
          example: Medium
        riskKnownAdultCommunity:
          type: string
          example: Medium
        riskPublicCommunity:
          type: string
          example: Medium
        riskChildrenCommunity:
          type: string
          example: Medium
        imminentRiskOfViolenceTowardsPartner:
          type: string
          example: Low
        imminentRiskOfViolenceTowardsOthers:
          type: string
          example: Low
        alerts:
          type: array
          items:
            $ref: '#/components/schemas/Alert'

    Alert:
      type: object
      properties:
        description:
          type: string
          example: Violence





