openapi: 3.0.1
info:
  title: Accredited Programmes API
  version: 1.0.0
servers:
  - url: /
paths:
  /courses:
    get:
      tags:
        - Courses
      summary: List all courses
      responses:
        200:
          description: Return a JSON representation of all courses that are not withdrawn.
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Course'

  /courses/csv:
    put:
      tags:
        - Courses
      summary: Upload a CSV format file containing a full set of Courses data.
      requestBody:
        required: true
        content:
          'text/csv;charset=UTF-8':
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CourseRecord'
      responses:
        204:
          description: Successful update
        400:
          description: Bad input
    get:
      tags:
        - Courses
      summary: List all courses
      responses:
        200:
          description: Return a CSV format representation of all courses that are not withdrawn. The data is compatible with the PUT /courses endpoint and may be round-tripped.
          content:
            'text/csv;charset=UTF-8':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CourseRecord'

  /courses/prerequisites/csv:
    get:
      tags:
        - Course Prerequisites
      summary: Download a CSV format representation of the current set of prerequisites.
      responses:
        200:
          description: The CSV formatted data is compatible with the PUT operation and may be round-tripped.
          content:
            'text/csv;charset=UTF-8':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PrerequisiteRecord'
    put:
      tags:
        - Course Prerequisites
      summary: Upload a CSV format file containing a full set of prerequisites data for the current set of courses.
      description: "Accepts a CSV format file of data representing the desired state of all prerequisite data attached to the current set of courses.
      <p>Pre-existing prerequisite data will be removed before the new data is applied.
      <p>The first row of CSV data is treated as a header row.  The column headings in the header row must much the names of the fields in the PrerequisiteRecord schema. Column order is not important."
      requestBody:
        required: true
        content:
          'text/csv;charset=UTF-8':
            schema:
              type: array
              items:
                $ref: '#/components/schemas/PrerequisiteRecord'
      responses:
        200:
          description: Successful update
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LineMessage'

        400:
          description: Bad input
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /courses/{courseId}:
    get:
      tags:
        - Courses
      summary: Details for a single course
      parameters:
        - name: courseId
          in: path
          description: A course identifier
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Course'

  /courses/{courseId}/offerings:
    get:
      tags:
        - Course Offerings
      summary: List all offerings for a course
      parameters:
        - name: courseId
          in: path
          description: A course identifier
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CourseOffering'

  /offerings/csv:
    get:
      tags:
        - Course Offerings
      summary: Download all Offerings in CSV format
      responses:
        200:
          description: successful operation
          content:
            'text/csv;charset=UTF-8':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OfferingRecord'
    put:
      tags:
        - Course Offerings
      summary: Upload all offerings in CSV format.
      description: "Accepts a CSV format file of data representing the desired state of all offerings data attached to the current set of courses.
      <p>Pre-existing offering data will be removed before the new data is applied.
      <p>The first row of CSV data is treated as a header row.  The column headings in the header row must much the names of the fields in the OfferingRecord schema. Column order is not important."
      requestBody:
        required: true
        content:
          'text/csv;charset=UTF-8':
            schema:
              type: array
              items:
                $ref: '#/components/schemas/OfferingRecord'
      responses:
        204:
          description: Successful update
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LineMessage'
        400:
          description: Bad input
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /offerings/{offeringId}:
    get:
      tags:
        - Course Offerings
      summary: Details for a single course offering

      parameters:
        - name: offeringId
          in: path
          description: A course offering identifier
          required: true
          schema:
            type: string
            format: uuid

      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/CourseOffering'
        401:
          description: Unauthorised. The request was unauthorised.
        403:
          description: Forbidden.  The client is not authorised to access this offering.
        404:
          description: Invalid course offering id
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /referrals:
    post:
      tags:
        - Referrals
      summary: Start a referral
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/StartReferral'
      responses:
        201:
          description: Started referral
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ReferralStarted'
        400:
          description: Bad input
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorised. The request was unauthorised.

    get:
      summary: Retrieve some referrals
      tags:
        - Referrals
      parameters:
        - name: status
          in: query
          description: If present, only return referrals in the given state
          required: false
          schema:
            $ref: "#/components/schemas/ReferralStatus"
        - name: offeringId
          in: query
          description: The id (UUID) of an active offering. If present, only return referrals for that offering.
          required: false
          schema:
            type: string
            format: uuid
        - name: prisonNumber
          in: query
          description: The prison number of the person who is being referred. If present, only return referrals for the person.
          example: "A1234AA"
          required: false
          schema:
            type: string
        - name: referrerId
          in: query
          description: A permanent identifier for the person creating the referral. StaffId for prison staff. If present, only return referrals for that referrer.
          required: false
          schema:
            type: string

      responses:
        200:
          description: Returns information about matching referrals
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Referral'
        401:
          description: The request was unauthorised
        403:
          description: Forbidden.  The client is not authorised to access referrals.

  /referrals/{id}:
    get:
      tags:
        - Referrals
      summary: Retrieve a referral
      parameters:
        - name: id
          in: path
          description: The id (UUID) of a referral
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Information about the referral
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Referral'
        401:
          description: The request was unauthorised
        403:
          description: Forbidden.  The client is not authorised to access this referral.
        404:
          description: The referral does not exist

    put:
      tags:
        - Referrals
      summary: Update a referral
      parameters:
        - name: id
          in: path
          description: The id (UUID) of a referral
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/ReferralUpdate"
      responses:
        204:
          description: The referral was updated
        401:
          description: The request was unauthorised
        403:
          description: Forbidden.  The client is not authorised to access this referral.
        404:
          description: The referral does not exist

  /referrals/{id}/status:
    put:
      summary: Change a referral's status
      tags:
        - Referrals
      parameters:
        - name: id
          in: path
          description: The id (UUID) of a referral
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/StatusUpdate'
      responses:
        204:
          description: The referral now has the requested status.
        401:
          description: The request was unauthorised.
        403:
          description: Forbidden.  The client is not authorised to access this referral.
        404:
          description: The referral does not exist.
        409:
          description: The referral may not change its status to the supplied value.

  /offerings/{id}/course:
    get:
      tags:
        - Courses
      summary: Retrieve the course that owns an offering.
      parameters:
        - name: id
          in: path
          description: The id (UUID) of an offering.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Information about the Course that owns the offering.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Course'
        401:
          description: The request was unauthorised
        403:
          description: Forbidden.  The client is not authorised to access this offering.
        404:
          description: No offering has the supplied id (Not Found).

  /course-participations:
    post:
      tags:
        - Course participations
      summary: Record information about a person's prior participation in a course.
      operationId: createCourseParticipation
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/CreateCourseParticipation'
      responses:
        201:
          description: The course participation information has been added.
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/CourseParticipation"
        400:
          description: Bad input
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The client is not authorized to perform this operation.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /course-participations/{courseParticipationId}:
    get:
      tags:
        - Course participations
      summary: Return information about a person's participation in a course. Selected by a unique identifier.
      operationId: getCourseParticipation
      parameters:
        - name: courseParticipationId
          in: path
          description: The unique identifier assigned to this record when it was created.
          schema:
            type: string
            format: uuid
          required: true
      responses:
        200:
          description: The selected course participation record.
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/CourseParticipation"
        401:
          description: The client is not authorised to perform this operation.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - Course participations
      summary: Update the information about a person's participation in a course.
      operationId: updateCourseParticipation
      parameters:
        - name: courseParticipationId
          in: path
          description: The unique identifier assigned to this record when it was created.
          schema:
            type: string
            format: uuid
          required: true
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/CourseParticipationUpdate"
        required: true
      responses:
        200:
          description: The information about a person's participation in a course has been updated.
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/CourseParticipation"
        401:
          description: The client is not authorized to perform this operation.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: There is no information for the id, so it cannot be updated.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - Course participations
      summary: Delete information about a person's participation in a course.
      operationId: deleteCourseParticipation
      parameters:
        - name: courseParticipationId
          in: path
          description: The unique identifier assigned to this record when it was created.
          schema:
            type: string
            format: uuid
          required: true
      responses:
        204:
          description: The information about a person's participation in a course has been deleted.
        401:
          description: The client is not authorized to perform this operation.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /people/{prisonNumber}/course-participations:
    get:
      tags:
        - Course participations
      summary: Retrieve course participation information for a person identified by their prison number.
      operationId: getCourseParticipationsForPrisonNumber
      parameters:
        - name: prisonNumber
          in: path
          description: The prison number of the person for whom the information should be retrieved.
          example: "A1234AA"
          required: true
          schema:
            type: string
      responses:
        200:
          description: All historic course participation information for the person.  Empty if none found.
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CourseParticipation"
        401:
          description: The client is not authorised to perform this operation.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    Course:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: Thinking skills programme
        description:
          type: string
          example: Thinking Skills Programme (TSP) description
        alternateName:
          type: string
          example: 'BNM+'
        coursePrerequisites:
          type: array
          items:
            $ref: '#/components/schemas/CoursePrerequisite'
        audiences:
          type: array
          items:
            $ref: '#/components/schemas/CourseAudience'
        referable:
          type: boolean
          default: true
      required:
        - id
        - name
        - coursePrerequisites
        - audiences
        - referable

    CourseRecord:
      title: 'CourseRecord'
      type: object
      properties:
        name:
          type: string
        alternateName:
          type: string
        identifier:
          type: string
        description:
          type: string
        audience:
          type: string
        comments:
          type: string
        referable:
          type: boolean
          default: true
      required:
        - name
        - identifier
        - description
        - audience
        - referable

    CoursePrerequisite:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
      example:
        - name: gender
          description: female
        - name: risk score
          description: 'ORGS: 50+'
        - name: offence type
          description: some offence here
      required:
        - name
        - description

    PrerequisiteRecord:
      type: object
      title: 'PrerequisiteRecord'
      properties:
        name:
          type: string
          example: "age"
          description: "The name of this Course Prerequisite."
        description:
          type: string
          example: "18+"
          description: "The value of this Course Prerequisite."
        course:
          type: string
          example: "Kaizen"
          description: "The name of the Course to which this Prerequisite applies. The name must match a course name exactly for this Prerequisite to be added to the Course."
        identifier:
          type: string
          example: "BNM-IPVO"
        comments:
          type: string
      required:
        - name
        - course
        - identifier

    CourseOffering:
      type: object
      properties:
        id:
          type: string
          format: uuid
        organisationId:
          type: string
          example: "MDI"
          description: "The unique identifier associated with the location hosting the offering. For prisons, this is the PrisonId, which is usually three capital letters."
        contactEmail:
          type: string
          format: email
          example: "ap-admin@digital.justice.gov.uk"
          description: "The email address of a contact for this offering"
        secondaryContactEmail:
          type: string
          format: email
          example: "ap-admin-2@digital.justice.gov.uk"
          description: "An optional secondary email address of a contact for this offering."

      required:
        - id
        - organisationId
        - contactEmail

    OfferingRecord:
      type: object
      title: 'OfferingRecord'
      properties:
        course:
          type: string
          example: "Kaizen"
          description: "The name of the Course to which this Offering applies. This value is only present to help with comprehension. It is not used to match offerings with courses."
        identifier:
          type: string
          description: "The unique identifier of the Course variant to which this Offering applies. The offering is added to the course having this identifier."
          example: "BNM-IPVO"
        organisation:
          type: string
        "contact email":
          type: string
          format: email
          example: "ap-admin@digital.justice.gov.uk"
          description: "The email address of the contact for this offering."
        "secondary contact email":
          type: string
          format: email
          example: "ap-admin2@digital.justice.gov.uk"
          description: "An optional secondary email address of a contact for this offering."
        prisonId:
          type: string
          example: "MDI"
          description: "The prison id for the prison associated with this Offering. This is usually three capital letters."
      required:
        - course
        - prisonId
        - identifier

    CourseAudience:
      type: object
      properties:
        value:
          type: string
          example: "General Violence"
        id:
          type: string
          format: uuid
      required:
        - id
        - value

    LineMessage:
      description: "warnings and errors for a line in an uploaded CSV file."
      type: object
      properties:
        lineNumber:
          type: integer
          example: 20
          description: "The number of the line in the CSV file that was rejected. The header line is lineNumber 1, the first line of CSV data is lineNumber 2."
        level:
          type: string
          enum:
            - Warning
            - Error
          description: "One of 'Error' or 'Warning'.  If a line has an Error then the data was not added. If it is a Warning then the line was added but there was a problem that should be corrected."
        message:
          type: string
          example: "No match for course 'Kaizen', prisonId 'BWI'"
          description: "Useful information about the Error or Warning."

    ErrorResponse:
      type: object
      properties:
        status:
          type: integer
          example: 404
        errorCode:
          type: integer
        userMessage:
          type: string
          example: "Course not found"
        developerMessage:
          type: string
        moreInfo:
          type: string
      required:
        - status

    CourseParticipationUpdate:
      type: object
      properties:
        courseId:
          description: "The identifier of a course currently or previously managed by this service.  
                        Must be the unique identifier of a course. If the participant's course is not known to this service
                        or cannot be identified, then this field should not be supplied. Instead, add an arbitrary name 
                        for the course in otherCourseName."
          type: string
          format: uuid
        otherCourseName:
          description: "The name of the course taken by the participant.  It should only be used when this course is not managed
                        by this service or cannot be identified. See courseId."
          type: string
        setting:
          $ref: '#/components/schemas/CourseParticipationSetting'
        outcome:
          $ref: '#/components/schemas/CourseParticipationOutcome'
        source:
          type: string

    CreateCourseParticipation:
      allOf:
        - $ref: "#/components/schemas/CourseParticipationUpdate"
        - type: object
          properties:
            prisonNumber:
              description: The prison number of the course participant.
              example: "A1234AA"
              type: string
          required:
            - prisonNumber

    CourseParticipation:
      allOf:
        - $ref: "#/components/schemas/CreateCourseParticipation"
        - type: object
          properties:
            id:
              description: A unique identifier for this record of participation in a course.
              type: string
              format: uuid
          required:
            - id

    CourseParticipationSettingType:
      description: Either Custody or Community.
      type: string
      enum:
        - custody
        - community

    CourseParticipationSetting:
      description: Information about where the course was held.
      type: object
      properties:
        location:
          type: string
        type:
          $ref: '#/components/schemas/CourseParticipationSettingType'

    CourseParticipationOutcome:
      description: The outcome of participating in a course.
      type: object
      properties:
        status:
          type: string
          enum:
            - incomplete
            - complete
        detail:
          type: string
        yearStarted:
          type: integer
        yearCompleted:
          type: integer

    StartReferral:
      type: object
      properties:
        offeringId:
          description: The id (UUID) of an active offering
          type: string
          format: uuid
        prisonNumber:
          description: The prison number of the person who is being referred.
          example: "A1234AA"
          type: string
        referrerId:
          description: A permanent identifier for the person creating the referral. StaffId for prison staff.
          type: string
      required:
        - offeringId
        - prisonNumber
        - referrerId

    ReferralUpdate:
      type: object
      properties:
        reason:
          type: string
        oasysConfirmed:
          type: boolean
          default: false
      required:
        - oasysConfirmed

    Referral:
      allOf:
        - $ref: "#/components/schemas/StartReferral"
        - $ref: "#/components/schemas/ReferralUpdate"
        - type: object
          properties:
            id:
              description: The unique id (UUID) of this referral.
              type: string
              format: uuid
            status:
              $ref: "#/components/schemas/ReferralStatus"
          required:
            - id
            - offeringId
            - prisonNumber
            - referrerId
            - oasysConfirmed
            - status

    ReferralStarted:
      type: object
      properties:
        referralId:
          description: The unique id (UUID) of the new referral.
          type: string
          format: uuid
      required:
        - referralId

    StatusUpdate:
      type: object
      properties:
        status:
          $ref: "#/components/schemas/ReferralStatus"
      required:
        - status

    ReferralStatus:
      type: string
      enum:
        - referral_started
        - referral_submitted
        - awaiting_assessment
        - assessment_started